openapi: "3.0.0"

info:
  title: contentjet
  version: 0.1.0

paths:
  /user/authenticate:
    post:
      tags:
        - User
      summary: Authenticate a user
      description: Authenticate a user using [OAuth2 Resource Owner Password Credentials Grant](https://tools.ietf.org/html/rfc6749#section-4.3).
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  format: email
                password:
                  type: string
                  minLength: 6
                  maxLength: 64
                grant_type:
                  type: string
                  pattern: "^password$"
              required:
                - username
                - password
                - grant_type
      responses:
        200:
          description: Set password response
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                  expires_in:
                    type: integer
                  refresh_token:
                    type: string
                  token_type:
                    type: string
                    pattern: "^bearer$"
                # TODO: Add example

  /user/token-refresh:
    post:
      tags:
        - User
      summary: Refresh an authentication token
      description: Refreshes a valid authentication token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refresh_token:
                  type: string
              required:
                - refresh_token
      responses:
        200:
          description: Token refresh response
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                  expires_in:
                    type: integer
                  refresh_token:
                    type: string
                  token_type:
                    type: string
                    pattern: "^bearer$"
                # TODO: Add example

  /user/me:
    get:
      tags:
        - User
      summary: Retrieve the authenticated user
      description: Returns the authenticated user.
      responses:
        200:
          description: Retrieve authenticated user response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    put:
      tags:
        - User
      summary: Update the authenticated user
      description: Updates the authenticated user. Note only the user's name may be changed.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
              required:
                - name
              example:
                name: Ned Flanders
      responses:
        200:
          description: Update authenticated user response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /user/sign-up:
    post:
      tags:
        - User
      summary: Create new user
      description: Signs up a new user. Note the user will be created with `isActive` set to `false` and a verification email will be sent to the email address contained in the request.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                name:
                  type: string
                password:
                  type: string
                  minLength: 6
                  maxLength: 64
                inviteToken:
                  type: string
              required:
                - email
                - name
                - password
                - inviteToken
              example:
                name: Wayland Smithers
                email: wayland@example.com
                password: iheartburns
                inviteToken: TODO
      responses:
        201:
          description: Update authenticated user response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /user/verify:
    post:
      tags:
        - User
      summary: Verify a user
      description: TODO
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
              required:
                - token
      responses:
        200:
          description: User verification response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /user/request-password-reset:
    post:
      tags:
        - User
      summary: Request password reset
      description: Invoking this enpoint will send a unique reset password link to the user's email address
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
              required:
                - email
      responses:
        200:
          description: User verification response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /user/set-password:
    post:
      tags:
        - User
      summary: Set user password
      description: Sets a user's password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                password:
                  type: string
                  minLength: 6
                  maxLength: 64
              required:
                - token
                - password
      responses:
        200:
          description: Set password response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /project:
    post:
      tags:
        - Project
      summary: Create project
      description: Creates a project
      # TODO: Add requestBody:
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  minLength: 1
                  maxLength: 64
                metadata:
                  type: string
                  maxLength: 3000
              required:
                - name
              example:
                name: My first project
      responses:
        201:
          description: Create project response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
    get:
      tags:
        - Project
      summary: List projects
      description: Returns a paginated list of projects
      responses:
        200:
          description: List projects response
          content:
            application/json:
              schema:
                properties:
                  page:
                    type: integer
                  totalPages:
                    type: integer
                  totalRecords:
                    type: integer
                  results:
                    items:
                      $ref: '#/components/schemas/Project'
                example:
                  page: 1
                  totalPages: 1
                  totalRecords: 1
                  results:
                      - id: 327
                        name: My project
                        userId: 17
                        createdAt: '2017-11-03'
                        modifiedAt: '2017-11-15'

  /project/{projectId}:
    get:
      tags:
        - Project
      summary: Retrieve project
      description: Returns a project
      parameters:
        - $ref: '#/components/parameters/ProjectId'
      responses:
        200:
          description: Retrieve project response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'

  /project/{projectId}/entry-type:
    get:
      tags:
        - Entry type
      summary: List entry types
      description: Returns a list of entry types
      parameters:
        - $ref: '#/components/parameters/ProjectId'
      responses:
        200:
          description: Entry type list response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntryType'

  /project/{projectId}/entry-type/{entryTypeId}:
    get:
      tags:
        - Entry type
      summary: Retrieve entry type
      description: Returns an entry type
      parameters:
        - $ref: '#/components/parameters/ProjectId'
        - $ref: '#/components/parameters/EntryTypeId'
      responses:
        200:
          description: Retrieve entry type response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntryType'

  /project/{projectId}/entry-tag:
    get:
      tags:
        - Entry tag
      summary: List entry tags
      description: Returns a list of entry tags
      parameters:
        - $ref: '#/components/parameters/ProjectId'
      responses:
        200:
          description: Entry tag list response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string

  /project/{projectId}/media-tag:
    get:
      tags:
        - Media tag
      summary: List media tags
      description: Returns a list of media tags
      parameters:
        - $ref: '#/components/parameters/ProjectId'
      responses:
        200:
          description: Media tag list response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string

  /project/{projectId}/invite:
    post:
      tags:
        - Project invite
      summary: Invite user to project
      description: Invite user to project
      parameters:
        - $ref: '#/components/parameters/ProjectId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  maxLength: 128
                email:
                  type: string
                  format: email
              required:
                - name
                - email
      responses:
        200:
          description: Project invite response
          content:
            application/json:
              schema:
                # TODO: Confirm what this returns
                type: string

# TODO: GET /project/{projectId}/invite
# TODO: GET /project/{projectId}/invite/{projectInviteId}
# TODO: POST /project/{projectId}/invite/accept
# TODO: POST /project/{projectId}/invite/bulk-delete

  /project/{projectId}/web-hook:
    post:
      tags:
        - Web hook
      summary: Create web hook
      description: Creates a web hook for the project
      parameters:
        - $ref: '#/components/parameters/ProjectId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              properties:
                name:
                  type: string
                  maxLength: 64
              required:
                - name
      responses:
        200:
          description: Create web hook response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebHook'

components:
  parameters:
    ProjectId:
      name: projectId
      in: path
      description: Project id
      required: true
      schema:
        type: integer

    EntryTypeId:
      name: entryTypeId
      in: path
      description: Entry type id
      required: true
      schema:
        type: integer

  schemas:
    # TODO
    User:
      properties:
        id:
          type: integer
        name:
          type: string
        email:
          type: string
          format: email
        isActive:
          type: boolean
        isAdmin:
          type: boolean
        createdAt:
          type: string
          format: date-time
        modifiedAt:
          type: string
          format: date-time
      example:
        id: 86
        name: 'Maverick Mitchell'
        email: 'topgun@example.com'
        isActive: true
        isAdmin: false
        # FIXME
        createdAt: '2017-11-11'
        modifiedAt: '2017-11-11'

    Project:
      properties:
        id:
          type: integer
        name:
          type: string
          minLength: 1
          maxLength: 64
        metadata:
          type: string
          maxLength: 3000
        userId:
          type: integer
        createdAt:
          type: string
          format: date-time
        modifiedAt:
          type: string
          format: date-time

    COMMON_FIELD_PROPERTIES:
      type: object
      properties:
        name:
          type: string
          minLength: 4
          maxLength: 64
        label:
          type: string
          minLength: 4
          maxLength: 64
        description:
          type: string
          default: ''
          maxLength: 128
        required:
          type: boolean
          default: false
        disabled:
          type: boolean
          default: false
      required:
        - name
        - label
        - description
        - required
        - disabled

    TEXT:
      allOf:
        - $ref: '#/components/schemas/COMMON_FIELD_PROPERTIES'
        - type: object
          properties:
            fieldType:
              type: string
              pattern: '^TEXT$'
            minLength:
              type: integer
              minimum: 0
              maximum: 999
            maxLength:
              type: integer
              minimum: 1
              maximum: 1000
            format:
              type: string
              enum:
                - 'plaintext'
                - 'uri'
                - 'email'
          additionalProperties: false
          required:
            - 'fieldType'
            - 'minLength'
            - 'maxLength'
            - 'format'

    EntryType:
      properties:
        id:
          type: integer
        name:
          type: string
          minLength: 1
          maxLength: 64
        description:
          type: string
          default: ''
          maxLength: 128
        metadata:
          type: string
          default: ''
          maxLength: 3000
        projectId:
          type: integer
        userId:
          type: integer
        fields:
          type: object
          oneOf:
            - $ref: '#/components/schemas/TEXT'

    WebHook:
      type: object
      additionalProperties: false
      properties:
        id:
          type: integer
        name:
          type: string
          maxLength: 64
        isActive:
          type: boolean
          default: true
        url:
          type: string
          format: uri
        projectUpdated:
          type: boolean
          default: true
        projectDeleted:
          type: boolean
          default: true
        entryTypeCreated:
          type: boolean
          default: true
        entryTypeUpdated:
          type: boolean
          default: true
        entryTypeDeleted:
          type: boolean
          default: true
        entryCreated:
          type: boolean
          default: true
        entryUpdated:
          type: boolean
          default: true
        entryDeleted:
          type: boolean
          default: true
        entryDeletedBulk:
          type: boolean
          default: true
        mediaCreated:
          type: boolean
          default: true
        mediaUpdated:
          type: boolean
          default: true
        mediaDeleted:
          type: boolean
          default: true
        mediaDeletedBulk:
          type: boolean
          default: true
        createdAt:
          type: string
          format: date-time
        modifiedAt:
          type: string
          format: date-time
      required:
        - name
        - isActive
        - url
        - projectUpdated
        - projectDeleted
        - entryTypeCreated
        - entryTypeUpdated
        - entryTypeDeleted
        - entryCreated
        - entryUpdated
        - entryDeleted
        - entryDeletedBulk
        - mediaCreated
        - mediaUpdated
        - mediaDeleted
        - mediaDeletedBulk
